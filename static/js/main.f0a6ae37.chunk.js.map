{"version":3,"sources":["components/Alert.js","components/Decrypt.js","components/Encrypt.js","App.js","index.js"],"names":["Alert","t","className","Container","styled","div","Work","Decrypt","useState","page","setPage","isResult","setIsResult","isEmpty","setIsEmpty","resultValue","setResultValue","messageLen","setMessageLen","keyLen","setKeyLen","msg","setMsg","key","setKey","isValid","setIsValid","textAreaRef","useRef","onClick","cols","rows","maxlength","type","placeholder","value","onChange","event","mLen","target","length","status","test","console","log","kLen","current","select","document","execCommand","focus","ref","Axios","get","then","response","data","message","result","Encrypt","level","setLevel","getResult","a","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f0a6ae37.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Alert.css';\r\n\r\nconst Alert = ({t}) => {\r\n    return (\r\n            <h6 className=\"alert-box\">{t}</h6>\r\n    );\r\n}\r\n\r\nexport default Alert;","import React from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport styled from \"styled-components\"\r\nimport App from \"../App.js\"\r\nimport { FaChevronLeft, FaChevronRight, FaCopy } from \"react-icons/fa\";\r\nimport Axios from \"axios\";\r\nimport Encrypt from './Encrypt.js'\r\nimport Alert from './Alert.js'\r\nimport './Decrypt.css';\r\n\r\nconst API_URL = \"https://steapi.herokuapp.com/\";\r\n\r\nfunction Decrypt() {\r\n    const [page, setPage] = useState(0);\r\n    const [isResult, setIsResult] = useState(false);\r\n    const [isEmpty, setIsEmpty] = useState(false);\r\n    const [resultValue, setResultValue] = useState(\"Getting your data.....\");\r\n    const [messageLen, setMessageLen] = useState(0);\r\n    const [keyLen, setKeyLen] = useState(0);\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [key, setKey] = useState(\"\");\r\n    const [isValid, setIsValid] = useState(false);\r\n    const textAreaRef = useRef(null);\r\n\r\n\r\n    const goToHomePage = () => {\r\n        setPage(1)\r\n    }\r\n\r\n    const goToEncrypt = () => {\r\n        setPage(2);\r\n    }\r\n\r\n    const getMyData = () => {\r\n        Axios.get(`${API_URL}decrypt?msg=${msg}&key=${key}`).then(response => {\r\n            if(response.data.message){\r\n                setResultValue(response.data.message);\r\n            }else{\r\n                setResultValue(response.data.result);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const getResult = () => {\r\n        if(msg.length === 0 || key.length === 0){\r\n            setIsEmpty(true);\r\n            return;\r\n        }\r\n        let status = /\\$3%`\\/[123]@.+\\$3%`\\//.test(msg);\r\n        console.log(status);\r\n        setIsValid(status)\r\n        if(status){\r\n            getMyData();\r\n            setIsResult(true);\r\n            return;\r\n        }\r\n        setIsResult(false);\r\n    }\r\n\r\n    const clearSelection = () => {\r\n        setResultValue(\"\")\r\n        setMsg(\"\");\r\n        setKey(\"\");\r\n        setIsEmpty(false);\r\n        setMessageLen(0);\r\n        setKeyLen(0);\r\n        setIsValid(true)\r\n        setIsResult(false);\r\n    }\r\n\r\n    const calculateKeyLen = (event) => {\r\n        let kLen = event.target.value.length;\r\n        setKey(event.target.value);\r\n        setKeyLen(kLen);\r\n    }\r\n    \r\n    const calculateMsgLen = (event) => {\r\n        let mLen = event.target.value.length;\r\n        setMsg(event.target.value);\r\n        setMessageLen(mLen);\r\n        let status = /\\$3%`\\/[123]@.+\\$3%`\\//.test(event.target.value);\r\n        console.log(status);\r\n        setIsValid(status)\r\n    }\r\n\r\n    const copyToClipboard = (event) => {\r\n        textAreaRef.current.select();\r\n        document.execCommand('copy');\r\n        event.target.focus();\r\n    }  \r\n\r\n    if(page === 0){\r\n        return(\r\n            <Container>\r\n                <div className=\"button-options-to-transit\">\r\n                    <button \r\n                        className=\"encrypt-backToBasics-button transit\" \r\n                        onClick={goToHomePage}>\r\n                            <div className=\"home-button-encrypt\">\r\n                                <FaChevronLeft />\r\n                                <span>Home</span>\r\n                            </div>\r\n                    </button>\r\n                    <span className=\"encrpyt-page-heading\">Decrypt</span>\r\n                    <button className=\"encrypt-to-decrypt transit\"\r\n                    onClick={goToEncrypt}>\r\n                        <div className=\"home-button-encrypt\">\r\n                                <span>Encrypt</span> \r\n                                <FaChevronRight />\r\n                            </div>\r\n                    </button>\r\n                </div>\r\n                {!isValid &&\r\n                    <Alert t=\"Message format is wrong\"/>\r\n                }\r\n                {messageLen === 0 && isEmpty && \r\n                    <Alert t=\"Message &nbsp;Field &nbsp;Cannot &nbsp;be &nbsp;empty\"/>\r\n                }\r\n                {keyLen === 0 && isEmpty &&\r\n                    <Alert t=\"Key &nbsp;Field &nbsp;cannot &nbsp;be &nbsp;empty\" />\r\n                }\r\n                <Work>\r\n                    <div className=\"message-heading-flex-box\">\r\n                        <span>Message: </span>\r\n                    </div>\r\n                    <textarea \r\n                        cols=\"70\" \r\n                        rows=\"7\" \r\n                        maxlength=\"1000\" \r\n                        className=\"encrypt-message-form\" \r\n                        type=\"text\" \r\n                        placeholder=\"Enter Message To Decrypt\"\r\n                        value={msg}\r\n                        onChange={calculateMsgLen}\r\n                    />\r\n                    <br />\r\n                    <div className=\"key-container-main-decrypt\">\r\n                        <div className=\"key-input-and-heading\">\r\n                            <div className=\"key-heading-only\">\r\n                                <span>Key: </span>\r\n                                <div className=\"key-len-display\">\r\n                                    <span>{keyLen}</span><span>&nbsp;/25</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"key-input-only\">\r\n                                <input \r\n                                maxlength=\"25\" \r\n                                className=\"encrypt-key-form\" \r\n                                type=\"password\" \r\n                                placeholder=\"Enter Your Secret Key\" \r\n                                value={key}\r\n                                onChange={calculateKeyLen}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {isResult &&\r\n                        <>\r\n                            <div className=\"result-heading\">\r\n                                <span>Result:</span>\r\n                                <span onClick={copyToClipboard} className=\"copy-to-clipboard\">\r\n                                    <FaCopy />\r\n                                </span>\r\n                            </div>\r\n                            <textarea \r\n                                cols=\"70\" \r\n                                rows=\"7\" \r\n                                className=\"encrypt-result-form\" \r\n                                type=\"text\"\r\n                                ref={textAreaRef}\r\n                                value={resultValue}\r\n                            />\r\n                        </>\r\n                    }\r\n                    <div className=\"two-button-container\">\r\n                        <button \r\n                            className=\"encrypt-main-button\" \r\n                            onClick={getResult}>\r\n                                Decrypt\r\n                        </button>\r\n                        <span>&nbsp; &nbsp; &nbsp;</span>\r\n                        <button \r\n                            className=\"encrypt-clear-selection\" \r\n                            onClick={clearSelection}>\r\n                                Clear\r\n                        </button>\r\n                    </div>\r\n                </Work>\r\n            </Container>\r\n        );\r\n    }else if(page === 1){\r\n        return (<App />);\r\n    }else if(page===2){\r\n        return (<Encrypt/>);\r\n    }\r\n}\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: grid;\r\n`\r\nconst Work = styled.div`\r\n    margin: auto;\r\n`\r\nexport default Decrypt;\r\n","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport { useState, useRef } from 'react';\r\nimport App from \"../App.js\";\r\nimport Alert from './Alert.js';\r\nimport Decrypt from './Decrypt.js';\r\nimport './Encrypt.css';\r\nimport { FaChevronLeft, FaChevronRight, FaCopy } from \"react-icons/fa\";\r\nimport Axios from 'axios';\r\n\r\nconst API_URL = \"https://steapi.herokuapp.com/\";\r\n\r\nfunction Encrypt() {\r\n    const [page, setPage] = useState(0);\r\n    const [isResult, setIsResult] = useState(false);\r\n    const [isEmpty, setIsEmpty] = useState(false);\r\n    const [resultValue, setResultValue] = useState(\"\");\r\n    const [messageLen, setMessageLen] = useState(0);\r\n    const [keyLen, setKeyLen] = useState(0);\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [key, setKey] = useState(\"\"); \r\n    const [level,setLevel] = useState(1);\r\n    const textAreaRef = useRef(null);\r\n\r\n    const handleLevel=(event)=>{\r\n      if(event.target.value >=1 && event.target.value <= 3){\r\n          setLevel(event.target.value);\r\n      }\r\n    }\r\n\r\n    const goToHomePage = () => {\r\n        setPage(1)\r\n    }\r\n\r\n    const goToDecrypt = () => {\r\n        setPage(2);\r\n    }\r\n\r\n    const getMyData = () => {\r\n        Axios.get(`${API_URL}encrypt?msg=${msg}&key=${key}&lvl=${level}`).then(response => {\r\n            setResultValue(response.data.result);\r\n        })\r\n    }\r\n\r\n    const getResult = async () => {\r\n        if(msg.length === 0 || key.length === 0){\r\n            setIsEmpty(true);\r\n            return;\r\n        }\r\n        setResultValue(\"Getting the result.....\");\r\n        setIsResult(true);\r\n        getMyData();\r\n    }\r\n\r\n    const clearSelection = () => {\r\n        setResultValue(\"\")\r\n        setMsg(\"\");\r\n        setKey(\"\");\r\n        setLevel(1);\r\n        setIsEmpty(false);\r\n        setMessageLen(0);\r\n        setKeyLen(0);\r\n        setIsResult(false);\r\n    }\r\n\r\n    const calculateKeyLen = (event) => {\r\n        let kLen = event.target.value.length;\r\n        setKey(event.target.value);\r\n        setKeyLen(kLen);\r\n    }\r\n    \r\n    const calculateMsgLen = (event) => {\r\n        let mLen = event.target.value.length;\r\n        setMsg(event.target.value);\r\n        setMessageLen(mLen);\r\n    }\r\n\r\n    const copyToClipboard = (event) => {\r\n        textAreaRef.current.select();\r\n        document.execCommand('copy');\r\n        event.target.focus();\r\n    }\r\n\r\n    if(page === 0){\r\n        return(\r\n            <Container>\r\n                {/* <h1>Encrypt Here</h1>\r\n                <h1>Take ENCRYPTION LEVEL AS WELL</h1> */}\r\n                <div className=\"button-options-to-transit\">\r\n                    <button \r\n                        className=\"encrypt-backToBasics-button transit\" \r\n                        onClick={goToHomePage}>\r\n                            <div className=\"home-button-encrypt\">\r\n                                <FaChevronLeft />\r\n                                <span>Home</span>\r\n                            </div>\r\n                    </button>\r\n                    <span className=\"encrpyt-page-heading\">Encrypt</span>\r\n                    <button className=\"encrypt-to-decrypt transit\"\r\n                    onClick={goToDecrypt}>\r\n                        <div className=\"home-button-encrypt\">\r\n                                <span>Decrypt</span> \r\n                                <FaChevronRight />\r\n                            </div>\r\n                    </button>\r\n                </div>\r\n                {messageLen === 0 && isEmpty && \r\n                    <Alert t=\"Message &nbsp;Field &nbsp;Cannot &nbsp;be &nbsp;empty\"/>\r\n                }\r\n                {keyLen === 0 && isEmpty &&\r\n                    <Alert t=\"Key &nbsp;Field &nbsp;cannot &nbsp;be &nbsp;empty\" />\r\n                }\r\n                <Work>\r\n                    <div className=\"message-heading-flex-box\">\r\n                        <span>Message: </span>\r\n                        <div>\r\n                            <span>{messageLen}</span><span>&nbsp;/1000</span>\r\n                        </div>\r\n                    </div>\r\n                    <textarea \r\n                        cols=\"70\" \r\n                        rows=\"7\" \r\n                        maxlength=\"1000\" \r\n                        className=\"encrypt-message-form\" \r\n                        type=\"text\" \r\n                        placeholder=\"Enter Message To Encrypt\"\r\n                        value={msg}\r\n                        onChange={calculateMsgLen}\r\n                    />\r\n                    <br />\r\n                    <div className=\"key-and-level-choice-container-main\">\r\n                        <div className=\"key-input-and-heading\">\r\n                            <div className=\"key-heading-only\">\r\n                                <span>Key: </span>\r\n                                <div className=\"key-len-display\">\r\n                                    <span>{keyLen}</span><span>&nbsp;/25</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"key-input-only\">\r\n                                <input \r\n                                maxlength=\"25\" \r\n                                className=\"encrypt-key-form\" \r\n                                type=\"password\" \r\n                                placeholder=\"Enter Your Secret Key\" \r\n                                value={key}\r\n                                onChange={calculateKeyLen}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"level-input-and-heading\">\r\n                            <div className=\"level-heading-only\">\r\n                                <span>Level: </span>\r\n                            </div>\r\n                            <div className=\"level-input-only\">\r\n                                <input  \r\n                                    className=\"encrypt-level-form\" \r\n                                    type=\"number\"\r\n                                    onChange={handleLevel}\r\n                                    value={level}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {isResult && \r\n                        <>\r\n                            <div className=\"result-heading\">\r\n                                <span>Result:</span>\r\n                                <span onClick={copyToClipboard} className=\"copy-to-clipboard\">\r\n                                    <FaCopy />\r\n                                </span>\r\n                            </div>\r\n                            <textarea \r\n                                cols=\"70\" \r\n                                rows=\"7\" \r\n                                className=\"encrypt-result-form\" \r\n                                type=\"text\"\r\n                                ref={textAreaRef}\r\n                                value={resultValue}\r\n                            />\r\n                        </>\r\n                    }\r\n                    <div className=\"two-button-container\">\r\n                        <button \r\n                            className=\"encrypt-main-button\" \r\n                            onClick={getResult}>\r\n                                Encrypt\r\n                        </button>\r\n                        <button \r\n                            className=\"encrypt-clear-selection\" \r\n                            onClick={clearSelection}>\r\n                                Clear\r\n                        </button>\r\n                    </div>\r\n                </Work>\r\n            </Container>\r\n        );\r\n    }else if(page === 1){\r\n        return (<App />);\r\n    }else if(page === 2){\r\n        return (<Decrypt />);\r\n    }\r\n}\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: grid;\r\n    `\r\nconst Work = styled.div`\r\nmargin: auto;\r\n    `\r\n\r\nexport default Encrypt;\r\n","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport Encrypt from './components/Encrypt';\nimport Decrypt from './components/Decrypt';\nimport { useState } from 'react';\nimport './App.css'\n\nfunction App() {\n\n  const [page, setPage] = useState(0)\n\n  const goToEncrypt = () => {\n    setPage(1);\n  }\n\n  const goToDecrypt = () => {\n    setPage(2)\n  }\n\n  if(page === 0){\n    return(\n      <main className=\"main-container\">\n          <button className=\"home-screen-button encrypt\" onClick={goToEncrypt}>\n            <span className=\"button-text\">Encrypt</span>\n          </button>\n          <span>&nbsp; &nbsp;</span>\n          <button className=\"home-screen-button decrypt\" onClick={goToDecrypt}>\n            <span className=\"button-text\">Decrypt</span>\n          </button>\n      </main>\n    );\n  }else if(page === 1){\n    return(\n      <>\n        <Encrypt />\n      </>\n    );\n  }else if(page === 2){\n    return(\n      <>\n        <Decrypt />\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}